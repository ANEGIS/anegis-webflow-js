{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/validation-email.ts", "../src/validation-vatid.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "export function EmailValidation() {\n  console.log('email validation');\n}\n", "// Types\ntype ValidationResult = {\n  isValid: boolean;\n  error?: string;\n  normalizedVatId?: string;\n};\n\ntype DOMElements = {\n  inputBox: HTMLInputElement;\n  msgVatID: HTMLElement;\n  submitButton: HTMLButtonElement;\n};\n\ntype Styles = {\n  error: {\n    color: string;\n    opacity: string;\n  };\n  normal: {\n    color: string;\n    opacity: string;\n  };\n};\n\n// Constants\nconst WEIGHTS: readonly number[] = [6, 5, 7, 2, 3, 4, 5, 6, 7];\nconst VALID_LENGTH = 10;\nconst MSG_CHARS_EXCEED = 'Numer NIP jest za d\u0142ugi';\nconst MSG_CHARS_RECEDE = 'Numer NIP jest za kr\u00F3tki';\nconst MSG_CHARS_INVALID = 'Numer NIP jest nieprawid\u0142owy!';\nconst BASIC_COLOR = 'var(--turquise-a)';\nconst ERROR_COLOR = 'var(--alert-hover)';\n\nexport function VatValidation() {\n  const htmlLang = document.documentElement.lang?.toLowerCase() || '';\n  const browserLang = navigator.language?.toLowerCase() || '';\n  const isPolishSite =\n    htmlLang.startsWith('pl') || browserLang.startsWith('pl') || browserLang.includes('pl');\n\n  // Only proceed if the site is in Polish\n  if (!isPolishSite) {\n    console.log('VAT ID validation is only enabled for Polish language sites');\n    return;\n  }\n\n  // DOM Elements\n  const elements: DOMElements = {\n    inputBox: document.querySelector('[data-nip-input]') as HTMLInputElement,\n    msgVatID: document.querySelector('[data-nip-feedback]') as HTMLElement,\n    submitButton: document.querySelector('[data-nip-submit]') as HTMLButtonElement,\n  };\n\n  // Exit if required elements are not found\n  if (!elements.inputBox || !elements.msgVatID || !elements.submitButton) {\n    console.warn('Required DOM elements for VAT ID validation not found');\n    return;\n  }\n\n  // Styles\n  const styles: Styles = {\n    error: {\n      color: ERROR_COLOR,\n      opacity: '0.5',\n    },\n    normal: {\n      color: BASIC_COLOR,\n      opacity: '1',\n    },\n  };\n\n  /**\n   * Validates a Polish VAT ID (NIP)\n   */\n  function validatePolishVatId(vatId: string): ValidationResult {\n    const cleanVatId = vatId.replace(/[\\s-]/g, '');\n\n    if (!/^\\d{10}$/.test(cleanVatId)) {\n      return {\n        isValid: false,\n        error: `VAT ID must contain exactly ${VALID_LENGTH} digits`,\n      };\n    }\n\n    const digits = cleanVatId.split('').map(Number);\n    const sum = WEIGHTS.reduce((acc, weight, index) => acc + weight * digits[index], 0);\n    const checkDigit = digits[9];\n    const expectedCheckDigit = sum % 11;\n\n    return expectedCheckDigit === checkDigit\n      ? { isValid: true, normalizedVatId: cleanVatId }\n      : { isValid: false, error: 'Invalid checksum' };\n  }\n\n  /**\n   * Updates UI to show validation error\n   */\n  function showValidationError(message: string): void {\n    elements.msgVatID.style.display = 'block';\n    elements.msgVatID.innerText = message;\n    elements.msgVatID.style.color = styles.error.color;\n    elements.inputBox.style.borderBottomColor = styles.error.color;\n    elements.submitButton.setAttribute('disabled', 'true');\n    elements.submitButton.style.opacity = styles.error.opacity;\n  }\n\n  /**\n   * Resets UI to normal state\n   */\n  function resetValidationState(): void {\n    elements.msgVatID.style.display = 'none';\n    elements.msgVatID.innerText = '';\n    elements.inputBox.style.borderBottomColor = styles.normal.color;\n    elements.submitButton.removeAttribute('disabled');\n    elements.submitButton.style.opacity = styles.normal.opacity;\n  }\n\n  /**\n   * Handles VAT ID validation and UI updates\n   */\n  function handleVatIdValidation(value: string): void {\n    const result = validatePolishVatId(value);\n\n    if (result.isValid) {\n      console.log('Valid VAT ID:', result.normalizedVatId);\n      resetValidationState();\n    } else if (value.length > VALID_LENGTH) {\n      showValidationError(MSG_CHARS_EXCEED);\n    } else if (value.length < VALID_LENGTH) {\n      showValidationError(MSG_CHARS_RECEDE);\n    } else {\n      console.log('Invalid VAT ID:', result.error);\n      showValidationError(MSG_CHARS_INVALID);\n    }\n  }\n\n  /**\n   * Observes changes to an element's property\n   */\n  function observeElement<T extends HTMLElement>(\n    element: T,\n    property: keyof T,\n    callback: (oldValue: any, newValue: any) => void,\n    delay: number = 0\n  ): void {\n    const elementPrototype = Object.getPrototypeOf(element);\n\n    if (elementPrototype.hasOwnProperty(property)) {\n      const descriptor = Object.getOwnPropertyDescriptor(elementPrototype, property);\n\n      if (descriptor) {\n        Object.defineProperty(element, property, {\n          get: function () {\n            return descriptor.get?.apply(this, arguments);\n          },\n          set: function () {\n            const oldValue = this[property];\n            descriptor.set?.apply(this, arguments);\n            const newValue = this[property];\n\n            if (typeof callback === 'function') {\n              setTimeout(callback.bind(this, oldValue, newValue), delay);\n            }\n            return newValue;\n          },\n        });\n      }\n    }\n  }\n\n  // Event Listeners\n  elements.inputBox.addEventListener('input', (e: Event) => {\n    const target = e.target as HTMLInputElement;\n    console.log(\"Input value changed via UI. New value: '%s'\", target.value);\n    handleVatIdValidation(target.value);\n  });\n\n  // Observer setup\n  observeElement(elements.inputBox, 'value', (oldValue: string, newValue: string) => {\n    console.log(\"Input value changed via API. Value changed from '%s' to '%s'\", oldValue, newValue);\n  });\n\n  // Example test cases\n  const testVatIds: string[] = [\n    '5270103391', // Valid\n    '123-456-78-90', // Invalid\n    '1234567890', // Invalid\n    '527-010-33-91', // Valid but with formatting\n  ];\n\n  // Run tests\n  testVatIds.forEach((vatId) => {\n    const result = validatePolishVatId(vatId);\n    console.log(`VAT ID: ${vatId}`);\n    console.log('Result:', result);\n    console.log('---');\n  });\n}\n", "import { EmailValidation } from './validation-email';\nimport { VatValidation } from './validation-vatid';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(() => {\n  EmailValidation();\n  VatValidation();\n});\n"],
  "mappings": "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",
  "names": []
}
